<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	
	>
<channel>
	<title>Comments on: Neo4j: Facebook GraphSearch for the Rest of Us</title>
	<atom:link href="http://wp.local/2013/02/neo4j-facebook-graphsearch-for-the-rest-of-us/feed/" rel="self" type="application/rss+xml" />
	<link>http://wp.local/2013/02/neo4j-facebook-graphsearch-for-the-rest-of-us/</link>
	<description>Jim Webber&#039;s Blog</description>
	<lastBuildDate>Mon, 04 Jun 2018 12:30:52 +0000</lastBuildDate>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.9.6</generator>
	<item>
		<title>By: jim</title>
		<link>http://wp.local/2013/02/neo4j-facebook-graphsearch-for-the-rest-of-us/#comment-83807</link>
		<dc:creator><![CDATA[jim]]></dc:creator>
		<pubDate>Tue, 18 Aug 2015 14:28:26 +0000</pubDate>
		<guid isPermaLink="false">http://jimwebber.org/?p=681#comment-83807</guid>
		<description><![CDATA[Sorry, I nuked that repo. But the inline Cypher snippets should be good enough to get you going.]]></description>
		<content:encoded><![CDATA[<p>Sorry, I nuked that repo. But the inline Cypher snippets should be good enough to get you going.</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Ankur</title>
		<link>http://wp.local/2013/02/neo4j-facebook-graphsearch-for-the-rest-of-us/#comment-83806</link>
		<dc:creator><![CDATA[Ankur]]></dc:creator>
		<pubDate>Tue, 18 Aug 2015 14:16:39 +0000</pubDate>
		<guid isPermaLink="false">http://jimwebber.org/?p=681#comment-83806</guid>
		<description><![CDATA[Indeed good article.

https://github.com/jimwebber/graphsearchexample

Above link for git repository is not valid, please provide the working link.]]></description>
		<content:encoded><![CDATA[<p>Indeed good article.</p>
<p><a href="https://github.com/jimwebber/graphsearchexample" rel="nofollow">https://github.com/jimwebber/graphsearchexample</a></p>
<p>Above link for git repository is not valid, please provide the working link.</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Magne</title>
		<link>http://wp.local/2013/02/neo4j-facebook-graphsearch-for-the-rest-of-us/#comment-23623</link>
		<dc:creator><![CDATA[Magne]]></dc:creator>
		<pubDate>Thu, 28 Aug 2014 11:15:50 +0000</pubDate>
		<guid isPermaLink="false">http://jimwebber.org/?p=681#comment-23623</guid>
		<description><![CDATA[Thanks for a great post Jim. :) Very clearly and simply explained.]]></description>
		<content:encoded><![CDATA[<p>Thanks for a great post Jim. :) Very clearly and simply explained.</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: jim</title>
		<link>http://wp.local/2013/02/neo4j-facebook-graphsearch-for-the-rest-of-us/#comment-867</link>
		<dc:creator><![CDATA[jim]]></dc:creator>
		<pubDate>Tue, 12 Feb 2013 19:54:30 +0000</pubDate>
		<guid isPermaLink="false">http://jimwebber.org/?p=681#comment-867</guid>
		<description><![CDATA[Hi Nick,

In terms of raw numbers, Neo4j currently scales to 32B nodes/rels and 62B properties. But those are somewhat arbitrary limits stemming from the choice of pointer size on disk which will be removed in our 2.0 release (still finite, but effectively infinite).

The bigger challenge is dataset size - Neo4j is a master/slave cluster at the moment meaning a full (or nearly full) replica of the data is on each participating machine. Practically I think this is operationally inconvenient much past a few tens of TB. 

In future releases, Neo4j will drop master/slave in favour of masterless (peer to peer) clusters. At this point we&#039;ll take the opportunity to partition the data between the machines in the cluster so that the footprint of each is more modest. This will also provide horizontal scale for writes (within Amdahl&#039;s limits) as well as reads.

HTH.

Jim]]></description>
		<content:encoded><![CDATA[<p>Hi Nick,</p>
<p>In terms of raw numbers, Neo4j currently scales to 32B nodes/rels and 62B properties. But those are somewhat arbitrary limits stemming from the choice of pointer size on disk which will be removed in our 2.0 release (still finite, but effectively infinite).</p>
<p>The bigger challenge is dataset size &#8211; Neo4j is a master/slave cluster at the moment meaning a full (or nearly full) replica of the data is on each participating machine. Practically I think this is operationally inconvenient much past a few tens of TB. </p>
<p>In future releases, Neo4j will drop master/slave in favour of masterless (peer to peer) clusters. At this point we&#8217;ll take the opportunity to partition the data between the machines in the cluster so that the footprint of each is more modest. This will also provide horizontal scale for writes (within Amdahl&#8217;s limits) as well as reads.</p>
<p>HTH.</p>
<p>Jim</p>
]]></content:encoded>
	</item>
	<item>
		<title>By: Nick</title>
		<link>http://wp.local/2013/02/neo4j-facebook-graphsearch-for-the-rest-of-us/#comment-865</link>
		<dc:creator><![CDATA[Nick]]></dc:creator>
		<pubDate>Tue, 12 Feb 2013 07:46:58 +0000</pubDate>
		<guid isPermaLink="false">http://jimwebber.org/?p=681#comment-865</guid>
		<description><![CDATA[Nice post. I&#039;m curious about a large-scale graph (larger than FB). What are the limitations with Neo4j to support the big data of big data?]]></description>
		<content:encoded><![CDATA[<p>Nice post. I&#8217;m curious about a large-scale graph (larger than FB). What are the limitations with Neo4j to support the big data of big data?</p>
]]></content:encoded>
	</item>
</channel>
</rss>
